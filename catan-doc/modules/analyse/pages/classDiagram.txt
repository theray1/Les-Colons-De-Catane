@startuml


package "Game"{
  class Game{
  	double ID_PARTY
  }
  class Dice{
  	value : Integer
  	roll()
  	getValue(): Integer
  }

  'Link
  Game "1" *-- "1" Map
  Game "1" *-- "3-4" Player
  Game "1" *- "1" Dice

}

package "Building"{
  abstract class Building{
  	Player owner
  }

  class City{
    'There is a limited number of each building
    {static} MAX_ENTITY : Integer
  }

  abstract class EdgeBuilding{
  
  }
  
  class Road{
    'There is a limited number of each building
    {static} MAX_ENTITY : Integer
  }

  class Settlement{
    'There is a limited number of each building
    {static} MAX_ENTITY : Integer
  }

  abstract class VerticeBuilding{}

  'Inheritance
  Building <|-- VerticeBuilding
  Building <|-- EdgeBuilding
  EdgeBuilding <|-- Road
  VerticeBuilding <|-- Settlement
  VerticeBuilding <|-- City
}

package "Map"{
  class Map{}
  class Tile{
  	coord_x : Integer
  	coord_x : Integer
  	coord_x : Integer
  	getHisResource() : Resource
  	getCoordX() : Integer
  	getCoordY() : Integer
  }
  class Robber{}

  Enum Tiles{
    HILL
    FOREST
    MOUNTAIN
    PASTURE
    FIELD
    DESERT
  }
  
  interface Location{
  	'Si l'emplacement contient un port
  	containsHarbor() : Boolean
  	'Si l'emplacement contient un batiment
  	isFree() : Boolean
  }
  
  class Edge{
  	
  }
  class Vertice{
  }
  

  class Harbor{}

  'Link
  Location <|-- Edge
  Location <|-- Vertice
  Map "1" *-- "19" Tile
  Tile "*" *- "1" Tiles
  Tile "*" *- "0-1" Resource
  Robber "1" *-- "1" Tile
  Vertice "2" *-- "0-1" Harbor
  Edge "1" *-- "0-1" Harbor
  Edge "1" *- "2" Vertice
  Vertice "1" *-- "2-3" Edge
  Tile "1" *-- "6" Edge
  Tile "1" *-- "6" Vertice
  Edge "1" *-- "0-1" EdgeBuilding
  Vertice "1" *-- "0-1" VerticeBuilding
  Map "1" *-- "1" Robber
}

package "Resource"{
  class Resource{
  	{static} getInstance(Resources type) : Resource
  }
  
  Enum Resources{
    BRICK
    WOOD
    STONE
    WOOL
    WHEAT
  }

  'Link
  Resource "*" *-- "1" Resources
}

package "Player"{
  class Player{
  	ID_USER : Double
  	color : Integer
  	getColor() : Integer
  	play()
  }
  
  Player "3-4" *-- "*" Card
}

package "Card"{
  abstract class Card{}
  class ResourceCard{}
  class DevelopmentCard{}
  Enum DevCards{
    KNIGHT
    PROGRESS
    VP
  }

  'Inheritance
  Card <|-- ResourceCard
  Card <|-- DevelopmentCard

  'Link
  DevelopmentCard "*" *-- "1" DevCards
  ResourceCard "*" *- "1" Resource
}


@enduml
