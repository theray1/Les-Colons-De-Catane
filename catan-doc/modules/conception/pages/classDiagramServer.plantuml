@startuml
package server {
    package core {
        package game {
        	interface Player{}
        	interface Resource{}
        	interface Coordinates{}
            interface GameFacade {
	        	+start()
	        	+end()
	        	+endPlayerTurn()
	        	+addResourcesTo(Player, Resource[])
	        	+removeResourcesTo(Player, Resource[])
	        	+moveRobber(Coordinates)
            }
        }
        package commands {
	    	
            interface CommandGameFactory {
            	+ActivateThieve(Player[]) : Command
            	+MoveThieve(Player[], Coordinates) : Command
            	+Ping(Player[]) : Command
            	+Build(Player[], Building) : Command
            	+ActiveCard(Player[], Card) : Command
            	+AddCard(Player[], Player, Integer) : Command
            	+BuyCard(Player[], Resource[]) : Command
            	+EndTurn(Player[], Player) : Command
            	+StartTurn(Player[], Player) : Command
            	+Win(Player[]) : Command
            	+SetResources(Player) : Command
            	+AddResources(Player[], Player, Integer) : Command
            	+TradeWithNonPlayerEntity(Player, Resource[], Resource[] ) : Command
            	+TradeWithPlayer(Player, Resource[], Player, Resource[]) : Command
            	+DenyTrade(Player, Player) : Command
            	+AcceptTrade(Player, Player) : Command
            	+LoginComplete(Player) : Command
            	+SetGame(Player[]) : Command
            	+SetPlayer(Player) : Command
            }
            interface Command <<Runnable>>{
                +getRecipients() : Player[]
            }

            interface Serializer {
                +serialize(Command): String
                +deSerialize(String): Command
            }
            
            abstract CommandWithContext implements Command{
            CommandContext context
            ~ final Set<Player> recipient
            }
        }

        package networking {
            interface ConnectionHandler {
                +Broadcast(Command)
                +sendCommand(Command)
                +isEnabled(): Boolean
                +addParticipant(Login, Player)
            }
        }

        package controler {
            
            interface GameControler {
                +receiveCommand(Command)
                +addParticipant(Login, Player)
                +addPlayer() : Player
            }

        }

    }
      
    package serverImpl {
        package commandsImpl {
            class SerializerImpl <<Serializer>>{}
            note bottom : Represent all types of commands.
            class CommandGameFactoryImpl <<CommandGameFactory>>{}
            AbstractCommand *-- "1-4"  Player
        }

        package controlerImpl {
        
	        Enum Status{
    	   		NOTSTARTED
    	   		STARTED
    	   		FINISHED
	        }

            class GameControlerImpl <<GameControler>>{
                -players: Player[]
                -commands: Command[]
				-executor: Executor
            }
            GameControlerImpl *-up- "1" CommandGameFactory
            GameControlerImpl *-up- "1" GameFacade
            GameControlerImpl *-up- "1" Serializer
            GameControlerImpl *-- "1" Status
            
        }
    }
 
    
    package gamemanager{
		    class ServerGameManager{
		    	+createParty()
		    	+insertClient(Command)
		    	getParty(Integer) : GameControler()
		    }
		    
		    
		    interface NetworkControler {
            	+sendCommand(Command)
            }
            note right: Network management "module"
            
		    class NetworkControlerImpl <<NetworkControler>>{
		    	links : Map{key : Player, value : Session} 
		    }
		    
		    
			
		    class Server {
		        {static}+main()
		    }
		    
		    ServerGameManager "1" *-right- "*" GameControler
		    Server "1" *-down- "1" ServerGameManager
            ServerGameManager *-up- NetworkControler
    
    }

}
@enduml
